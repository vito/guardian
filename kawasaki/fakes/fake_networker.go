// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden"
	"github.com/cloudfoundry-incubator/guardian/gardener"
	"github.com/cloudfoundry-incubator/guardian/kawasaki"
	"github.com/pivotal-golang/lager"
)

type FakeNetworker struct {
	CapacityStub        func() uint64
	capacityMutex       sync.RWMutex
	capacityArgsForCall []struct{}
	capacityReturns     struct {
		result1 uint64
	}
	HooksStub        func(log lager.Logger, handle, spec, externalNetworkSpec string) ([]gardener.Hooks, error)
	hooksMutex       sync.RWMutex
	hooksArgsForCall []struct {
		log                 lager.Logger
		handle              string
		spec                string
		externalNetworkSpec string
	}
	hooksReturns struct {
		result1 []gardener.Hooks
		result2 error
	}
	DestroyStub        func(log lager.Logger, handle string) error
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct {
		log    lager.Logger
		handle string
	}
	destroyReturns struct {
		result1 error
	}
	NetInStub        func(log lager.Logger, handle string, externalPort, containerPort uint32) (uint32, uint32, error)
	netInMutex       sync.RWMutex
	netInArgsForCall []struct {
		log           lager.Logger
		handle        string
		externalPort  uint32
		containerPort uint32
	}
	netInReturns struct {
		result1 uint32
		result2 uint32
		result3 error
	}
	NetOutStub        func(log lager.Logger, handle string, rule garden.NetOutRule) error
	netOutMutex       sync.RWMutex
	netOutArgsForCall []struct {
		log    lager.Logger
		handle string
		rule   garden.NetOutRule
	}
	netOutReturns struct {
		result1 error
	}
}

func (fake *FakeNetworker) Capacity() uint64 {
	fake.capacityMutex.Lock()
	fake.capacityArgsForCall = append(fake.capacityArgsForCall, struct{}{})
	fake.capacityMutex.Unlock()
	if fake.CapacityStub != nil {
		return fake.CapacityStub()
	} else {
		return fake.capacityReturns.result1
	}
}

func (fake *FakeNetworker) CapacityCallCount() int {
	fake.capacityMutex.RLock()
	defer fake.capacityMutex.RUnlock()
	return len(fake.capacityArgsForCall)
}

func (fake *FakeNetworker) CapacityReturns(result1 uint64) {
	fake.CapacityStub = nil
	fake.capacityReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeNetworker) Hooks(log lager.Logger, handle string, spec string, externalNetworkSpec string) ([]gardener.Hooks, error) {
	fake.hooksMutex.Lock()
	fake.hooksArgsForCall = append(fake.hooksArgsForCall, struct {
		log                 lager.Logger
		handle              string
		spec                string
		externalNetworkSpec string
	}{log, handle, spec, externalNetworkSpec})
	fake.hooksMutex.Unlock()
	if fake.HooksStub != nil {
		return fake.HooksStub(log, handle, spec, externalNetworkSpec)
	} else {
		return fake.hooksReturns.result1, fake.hooksReturns.result2
	}
}

func (fake *FakeNetworker) HooksCallCount() int {
	fake.hooksMutex.RLock()
	defer fake.hooksMutex.RUnlock()
	return len(fake.hooksArgsForCall)
}

func (fake *FakeNetworker) HooksArgsForCall(i int) (lager.Logger, string, string, string) {
	fake.hooksMutex.RLock()
	defer fake.hooksMutex.RUnlock()
	return fake.hooksArgsForCall[i].log, fake.hooksArgsForCall[i].handle, fake.hooksArgsForCall[i].spec, fake.hooksArgsForCall[i].externalNetworkSpec
}

func (fake *FakeNetworker) HooksReturns(result1 []gardener.Hooks, result2 error) {
	fake.HooksStub = nil
	fake.hooksReturns = struct {
		result1 []gardener.Hooks
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworker) Destroy(log lager.Logger, handle string) error {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct {
		log    lager.Logger
		handle string
	}{log, handle})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		return fake.DestroyStub(log, handle)
	} else {
		return fake.destroyReturns.result1
	}
}

func (fake *FakeNetworker) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeNetworker) DestroyArgsForCall(i int) (lager.Logger, string) {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return fake.destroyArgsForCall[i].log, fake.destroyArgsForCall[i].handle
}

func (fake *FakeNetworker) DestroyReturns(result1 error) {
	fake.DestroyStub = nil
	fake.destroyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworker) NetIn(log lager.Logger, handle string, externalPort uint32, containerPort uint32) (uint32, uint32, error) {
	fake.netInMutex.Lock()
	fake.netInArgsForCall = append(fake.netInArgsForCall, struct {
		log           lager.Logger
		handle        string
		externalPort  uint32
		containerPort uint32
	}{log, handle, externalPort, containerPort})
	fake.netInMutex.Unlock()
	if fake.NetInStub != nil {
		return fake.NetInStub(log, handle, externalPort, containerPort)
	} else {
		return fake.netInReturns.result1, fake.netInReturns.result2, fake.netInReturns.result3
	}
}

func (fake *FakeNetworker) NetInCallCount() int {
	fake.netInMutex.RLock()
	defer fake.netInMutex.RUnlock()
	return len(fake.netInArgsForCall)
}

func (fake *FakeNetworker) NetInArgsForCall(i int) (lager.Logger, string, uint32, uint32) {
	fake.netInMutex.RLock()
	defer fake.netInMutex.RUnlock()
	return fake.netInArgsForCall[i].log, fake.netInArgsForCall[i].handle, fake.netInArgsForCall[i].externalPort, fake.netInArgsForCall[i].containerPort
}

func (fake *FakeNetworker) NetInReturns(result1 uint32, result2 uint32, result3 error) {
	fake.NetInStub = nil
	fake.netInReturns = struct {
		result1 uint32
		result2 uint32
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeNetworker) NetOut(log lager.Logger, handle string, rule garden.NetOutRule) error {
	fake.netOutMutex.Lock()
	fake.netOutArgsForCall = append(fake.netOutArgsForCall, struct {
		log    lager.Logger
		handle string
		rule   garden.NetOutRule
	}{log, handle, rule})
	fake.netOutMutex.Unlock()
	if fake.NetOutStub != nil {
		return fake.NetOutStub(log, handle, rule)
	} else {
		return fake.netOutReturns.result1
	}
}

func (fake *FakeNetworker) NetOutCallCount() int {
	fake.netOutMutex.RLock()
	defer fake.netOutMutex.RUnlock()
	return len(fake.netOutArgsForCall)
}

func (fake *FakeNetworker) NetOutArgsForCall(i int) (lager.Logger, string, garden.NetOutRule) {
	fake.netOutMutex.RLock()
	defer fake.netOutMutex.RUnlock()
	return fake.netOutArgsForCall[i].log, fake.netOutArgsForCall[i].handle, fake.netOutArgsForCall[i].rule
}

func (fake *FakeNetworker) NetOutReturns(result1 error) {
	fake.NetOutStub = nil
	fake.netOutReturns = struct {
		result1 error
	}{result1}
}

var _ kawasaki.Networker = new(FakeNetworker)
